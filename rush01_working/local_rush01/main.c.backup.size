#include <stdio.h>
#include <unistd.h>

#define SIZE 4



void    ft_putchar(char a)
{
    write(1,&a,1);
}


int	check_col_up(int grid[4][4],int input[4], int row, int col)
{
	int	i;
	int	count_view;
	int	tallest;

	i = -1;
	while (++i < row)
		if (grid[i][col] == grid[row][col])
			return (0);
	i = -1;
	tallest = 0;
	count_view = 0;
	while (++i <= row)
	{
		if (grid[i][col] > tallest)
		{
			tallest = grid[i][col];
			count_view++;
		}
	}
	if ((row == SIZE - 1 && input[col] == count_view)
		|| (row != SIZE - 1 && input[col] >= count_view))
		return (1);
	return (0);
}

int	check_col_down(int grid[4][4], int input[4], int row, int col)
{
	int	i;
	int	count_view;
	int	tallest;

	if (row != SIZE - 1)
		return (1);
	i = row + 1;
	tallest = 0;
	count_view = 0;
	while (--i >= 0)
	{
		if (grid[i][col] > tallest)
		{
			tallest = grid[i][col];
			count_view++;
		}
	}
	if (input[col] == count_view)
		return (1);
	return (0);
}

int	check_row_left(int grid[4][4], int input[4], int row, int col)
{
	int	i;
	int	count_view;
	int	tallest;

	i = -1;
	while (++i < col)
		if (grid[row][i] == grid[row][col])
			return (0);
	i = -1;
	tallest = 0;
	count_view = 0;
	while (++i <= col)
	{
		if (grid[row][i] > tallest)
		{
			tallest = grid[row][i];
			count_view++;
		}
	}
	if ((col == SIZE - 1 && input[row] == count_view)
		|| (col != SIZE - 1 && input[row] >= count_view))
		return (1);
	return (0);
}

int	check_row_right(int grid[4][4], int input[4], int row, int col)
{
	int	i;
	int	count_view;
	int	tallest;

	if (col != SIZE - 1)
		return (1);
	i = SIZE;
	tallest = -1;
	count_view = 0;
	while (--i >= 0)
	{
		if (grid[row][i] > tallest)
		{
			tallest = grid[row][i];
			count_view++;
		}
	}
	if (input[row] == count_view)
		return (1);
	return (0);
}


int	ft_is_valid(int grid[4][4], int input[4][4], int row, int column)
{
	if (
      !check_col_up(grid, input[0], row, column) || 
		!check_col_down(grid, input[1], row, column) ||
		!check_row_left(grid, input[2], row, column) ||
		!check_row_right(grid, input[3], row, column)
	)
		return (0);
	return (1);
}



// Function to check if a number is safe to place in a cell
int isSafe(int grid[4][4], int row, int col, int num) {
    // Check if the number is not present in the same row or column
    int i = 0;
    while (i < SIZE) {
        if (grid[row][i] == num || grid[i][col] == num) {
            return 0;
        }
        i++;
    }
    return 1;
}

// Function to solve the Skyscraper puzzle
int ft_solve(int grid[4][4], int input[4][4], int row, int col) {
    if (row == SIZE) {
        // If we have reached the end of the grid, the puzzle is solved
        return 1;
    }

    if (grid[row][col] != 0) {
        // If the current cell is not empty, move to the next cell
        int nextRow = row, nextCol = col + 1;
        if (nextCol == SIZE) {
            nextRow++;
            nextCol = 0;
        }
        return ft_solve(grid, input, nextRow, nextCol);
    }

    // Try placing numbers from 1 to SIZE in the current cell
    int num;
    for (num = 1; num <= SIZE; num++) {
        if (isSafe(grid, row, col, num)) {
            grid[row][col] = num;

            // Check visibility constraints from the top, bottom, left, and right
            if (ft_is_valid(grid, input, row, col)) {
                int nextRow = row, nextCol = col + 1;
                if (nextCol == SIZE) {
                    nextRow++;
                    nextCol = 0;
                }
                if (ft_solve(grid, input, nextRow, nextCol)) {
                    return 1;
                }
            }

            // If we reach this point, the placement is invalid, so backtrack
            grid[row][col] = 0;
        }
    }

    // If no number can be placed in the current cell, backtrack
    return 0;
}


void ft_printgrid(int grid[4][4])
{
   int i = 0;
    int j;

    while (i < 4)
    {
        j = 0;
        while (j < 4)
        {
            ft_putchar(grid[i][j] + '0'); // Convert integer to character
            ft_putchar(' ');
            j++;
        }
        ft_putchar('\n');
        i++;
    }
}

int main() {

    int grid[4][4] = { {0} };

    int input[4][4] = {
        {1, 2, 2, 2},
        {4, 3, 2, 1},
        {1, 2, 3, 4},
        {2, 2, 2, 1}
    };

    if (ft_solve(grid, input, 0, 0)) {
        ft_printgrid(grid);
    } else {
        write(1,"Error\n",6);
    }

    return 0;
}
